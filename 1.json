{"story":"<h1 id=\"configuring-revealjs\"><span data-effect-id=\"effect-1666724847439-32\" data-effect-type=\"invisible\" data-effect-subject=\"2b397a6a\" data-effect-version=\"85e79b90\">Configuring reveal.js</span></h1><h2 id=\"initialization\"><span data-effect-id=\"effect-1666722886164-1\" data-effect-type=\"invisible\" data-effect-subject=\"699bbe77\" data-effect-version=\"20cbdef7\">Initialization</span></h2><p>The most common reveal.js use case is to have a single presentation which covers the full viewport. As of 4.0 we also support running multiple presentations in parallel on the same page as well as including the library as an ES module.</p><p>If you only have a single presentation on the page we recommend initializing reveal.js using the global Reveal object. The <span data-effect-id=\"effect-1666722886164-2\" data-effect-subject=\"699bbe77\" data-effect-version=\"20cbdef7\" data-effect-payload=\"{&quot;codeHighlights&quot;:&quot;3-5&quot;}\">Reveal.initialize</span> method accepts one argument; a reveal.js config object.</p><p>The initialize method returns a promise which will resolve as soon as the presentation is ready and can be interacted with via the API.</p><h2 id=\"initializing-plugins\"><span data-effect-id=\"effect-1666722886164-3\" data-effect-type=\"invisible\" data-effect-subject=\"699bbe77\" data-effect-version=\"a688e818\" data-effect-payload=\"{&quot;codeHighlights&quot;:&quot;2-3, 7&quot;}\">Initializing Plugins</span></h2><p>Normally when you initialize reveal.js you will be including one or two its plugins. This is done by passing plugin instances via the <code>plugins</code> configuration option.</p><h3 id=\"ready-event\">Ready Event</h3><p>If you want to interact with a plugin, you will need to wait for the <code><span data-effect-id=\"effect-1666724617286-28\" data-effect-subject=\"699bbe77\" data-effect-version=\"f8d224e3\" data-effect-payload=\"{&quot;codeHighlights&quot;:&quot;5-8&quot;}\">ready</span></code> event to fire. This event fires once reveal.js and its plugins are fully loaded and initialized. We strongly recommend waiting for this event before calling any API methods on reveal.js.</p><h3 id=\"plugin-api\">Plugin API</h3><p>If you are unsure whether a plugin is available, you can use the <code><span data-effect-id=\"effect-1666724478050-26\" data-effect-subject=\"699bbe77\" data-effect-version=\"8f082a96\" data-effect-payload=\"{&quot;codeHighlights&quot;:&quot;6-9&quot;}\">Reveal.hasPlugin</span></code> method to check which plugins that have been registered. It&#x27;s also possible to get a complete list of all registered plugins using the <code>Reveal.getPlugins</code> method.</p><h2 id=\"themes\"><span data-effect-id=\"effect-1666723460592-12\" data-effect-type=\"invisible\" data-effect-subject=\"1ca8c87e\" data-effect-version=\"687dbe3e\">Themes</span></h2><p>The reveal.js framework comes with a number of presentation themes built-in. These themes allow you to completely change the look and feel of your presentation with a simple config change.</p><h3 id=\"light-theme\"><span data-effect-id=\"effect-1666726009694-1\" data-effect-type=\"invisible\" data-effect-subject=\"1ca8c87e\" data-effect-version=\"687dbe3e\" data-effect-payload=\"{&quot;imageHighlights&quot;:[[0.014750190378439228,0.029672333449984344,0.4831308148197199,0.9453889083307241]]}\">Light Theme</span></h3><p>A super simple theme which mimics the styling you&#x27;d expect to get in a default document in most productivity tools. It uses a white background, black text and blue links.</p><h3 id=\"dark-theme\"><span data-effect-id=\"effect-1666726018527-2\" data-effect-type=\"invisible\" data-effect-subject=\"1ca8c87e\" data-effect-version=\"687dbe3e\" data-effect-payload=\"{&quot;imageHighlights&quot;:[[0.49894050259907957,0.015526863499898697,0.48842830182432206,0.9524616433057669]]}\">Dark Theme</span></h3><p>This is essentially the inverse of the light theme; dark background and white text. One of the most popular themes.</p><h2 id=\"configuration-options\"><span data-effect-id=\"effect-1666722886164-4\" data-effect-type=\"invisible\" data-effect-subject=\"de5e71f1\" data-effect-version=\"3e72846f\">Configuration Options</span></h2><p>Presentation behavior can be fine-tuned using a wide array of configuration options. These objects can be included where you initialize reveal.js. It&#x27;s also possible to change config values at runtime.</p><h2 id=\"presentation-controls\"><span data-effect-id=\"effect-1666722886164-5\" data-effect-type=\"invisible\" data-effect-subject=\"de5e71f1\" data-effect-version=\"3e72846f\" data-effect-payload=\"{&quot;codeHighlights&quot;:&quot;3-15&quot;}\">Presentation Controls</span></h2><p>There are a number of options you can use to fine tune presentation control behavior in reveal.js. If you want to hide the controls entirely, set controls to false.</p><p>The <span data-effect-id=\"effect-1666722886164-6\" data-effect-subject=\"de5e71f1\" data-effect-version=\"3e72846f\" data-effect-payload=\"{&quot;codeHighlights&quot;:&quot;10-11&quot;}\">controlsLayout</span> option can be used to adjust the visual appearance of presentation controls. This is set to &quot;bottom-right&quot; by default which means all four control arrows are gathered in the lower right corner of the screen. If you set this option to &quot;edges&quot; the control arrows will be attached to the four corresponding edges of the screen instead.</p><h2 id=\"slide-numbers\"><span data-effect-id=\"effect-1666722886164-7\" data-effect-type=\"invisible\" data-effect-subject=\"de5e71f1\" data-effect-version=\"3e72846f\" data-effect-payload=\"{&quot;codeHighlights&quot;:&quot;34&quot;}\">Slide Numbers</span></h2><p>Presentations can typically only be navigated on one axis but reveal.js supports multi-axis navigation. This is a very powerful feature, but depending on how the presentation is designed and who is controlling the navigation it can get difficult to know when to navigate in which direction. Enter navigationMode. Using the navigationMode option you can even turn a multi-axis presentation into a linear left-to-right experience.</p><h2 id=\"navigation-behavior\"><span data-effect-id=\"effect-1666722886164-8\" data-effect-type=\"invisible\" data-effect-subject=\"de5e71f1\" data-effect-version=\"3e72846f\" data-effect-payload=\"{&quot;codeHighlights&quot;:&quot;84-108&quot;}\">Navigation Behavior</span></h2><p>Presentations can typically only be navigated on one axis but reveal.js supports multi-axis navigation. This is a very powerful feature, but depending on how the presentation is designed and who is controlling the navigation it can get difficult to know when to navigate in which direction. Enter <span data-effect-id=\"effect-1666722886164-9\" data-effect-subject=\"de5e71f1\" data-effect-version=\"3e72846f\" data-effect-payload=\"{&quot;codeHighlights&quot;:&quot;108&quot;}\">navigationMode</span>. Using the navigationMode option you can even turn a multi-axis presentation into a linear left-to-right experience.</p>","subjectIndex":["2b397a6a","699bbe77","de5e71f1","1ca8c87e"],"subjects":{"1ca8c87e":{"name":"themes.png","type":"image","versionIndex":["687dbe3e"],"versions":{"687dbe3e":{"height":866,"value":"https://res.cloudinary.com/kodemo/image/upload/v1666725235/fUxdqmDN3EWU7n4Ak1oZh66D24O2/ukobprhprocdenu9lt8n.png","width":1927}}},"de5e71f1":{"name":"configuration.js","type":"code","versionIndex":["3e72846f"],"versions":{"3e72846f":{"value":"Reveal.initialize({\n\n  // Display presentation control arrows\n  controls: true,\n\n  // Help the user learn the controls by providing hints, for example by\n  // bouncing the down arrow when they first encounter a vertical slide\n  controlsTutorial: true,\n\n  // Determines where controls appear, \"edges\" or \"bottom-right\"\n  controlsLayout: 'bottom-right',\n\n  // Visibility rule for backwards navigation arrows; \"faded\", \"hidden\"\n  // or \"visible\"\n  controlsBackArrows: 'faded',\n\n  // Display a presentation progress bar\n  progress: true,\n\n  // Display the page number of the current slide\n  // - true:    Show slide number\n  // - false:   Hide slide number\n  //\n  // Can optionally be set as a string that specifies the number formatting:\n  // - \"h.v\":   Horizontal . vertical slide number (default)\n  // - \"h/v\":   Horizontal / vertical slide number\n  // - \"c\":   Flattened slide number\n  // - \"c/t\":   Flattened slide number / total slides\n  //\n  // Alternatively, you can provide a function that returns the slide\n  // number for the current slide. The function should take in a slide\n  // object and return an array with one string [slideNumber] or\n  // three strings [n1,delimiter,n2]. See #formatSlideNumber().\n  slideNumber: false,\n\n  // Can be used to limit the contexts in which the slide number appears\n  // - \"all\":      Always show the slide number\n  // - \"print\":    Only when printing to PDF\n  // - \"speaker\":  Only in the speaker view\n  showSlideNumber: 'all',\n\n  // Use 1 based indexing for # links to match slide number (default is zero\n  // based)\n  hashOneBasedIndex: false,\n\n  // Add the current slide number to the URL hash so that reloading the\n  // page/copying the URL will return you to the same slide\n  hash: false,\n\n  // Flags if we should monitor the hash and change slides accordingly\n  respondToHashChanges: true,\n\n  // Push each slide change to the browser history.  Implies `hash: true`\n  history: false,\n\n  // Enable keyboard shortcuts for navigation\n  keyboard: true,\n\n  // Optional function that blocks keyboard events when retuning false\n  //\n  // If you set this to 'focused', we will only capture keyboard events\n  // for embedded decks when they are in focus\n  keyboardCondition: null,\n\n  // Disables the default reveal.js slide layout (scaling and centering)\n  // so that you can use custom CSS layout\n  disableLayout: false,\n\n  // Enable the slide overview mode\n  overview: true,\n\n  // Vertical centering of slides\n  center: true,\n\n  // Enables touch navigation on devices with touch input\n  touch: true,\n\n  // Loop the presentation\n  loop: false,\n\n  // Change the presentation direction to be RTL\n  rtl: false,\n\n  // Changes the behavior of our navigation directions.\n  //\n  // \"default\"\n  // Left/right arrow keys step between horizontal slides, up/down\n  // arrow keys step between vertical slides. Space key steps through\n  // all slides (both horizontal and vertical).\n  //\n  // \"linear\"\n  // Removes the up/down arrows. Left/right arrows step through all\n  // slides (both horizontal and vertical).\n  //\n  // \"grid\"\n  // When this is enabled, stepping left/right from a vertical stack\n  // to an adjacent vertical stack will land you at the same vertical\n  // index.\n  //\n  // Consider a deck with six slides ordered in two vertical stacks:\n  // 1.1    2.1\n  // 1.2    2.2\n  // 1.3    2.3\n  //\n  // If you're on slide 1.3 and navigate right, you will normally move\n  // from 1.3 -> 2.1. If \"grid\" is used, the same navigation takes you\n  // from 1.3 -> 2.3.\n  navigationMode: 'default',\n\n  // Randomizes the order of slides each time the presentation loads\n  shuffle: false,\n\n  // Turns fragments on and off globally\n  fragments: true,\n\n  // Flags whether to include the current fragment in the URL,\n  // so that reloading brings you to the same fragment position\n  fragmentInURL: true,\n\n  // Flags if the presentation is running in an embedded mode,\n  // i.e. contained within a limited portion of the screen\n  embedded: false,\n\n  // Flags if we should show a help overlay when the question-mark\n  // key is pressed\n  help: true,\n\n  // Flags if it should be possible to pause the presentation (blackout)\n  pause: true,\n\n  // Flags if speaker notes should be visible to all viewers\n  showNotes: false,\n\n  // Global override for autolaying embedded media (video/audio/iframe)\n  // - null:   Media will only autoplay if data-autoplay is present\n  // - true:   All media will autoplay, regardless of individual setting\n  // - false:  No media will autoplay, regardless of individual setting\n  autoPlayMedia: null,\n\n  // Global override for preloading lazy-loaded iframes\n  // - null:   Iframes with data-src AND data-preload will be loaded when within\n  //           the viewDistance, iframes with only data-src will be loaded when visible\n  // - true:   All iframes with data-src will be loaded when within the viewDistance\n  // - false:  All iframes with data-src will be loaded only when visible\n  preloadIframes: null,\n\n  // Can be used to globally disable auto-animation\n  autoAnimate: true,\n\n  // Optionally provide a custom element matcher that will be\n  // used to dictate which elements we can animate between.\n  autoAnimateMatcher: null,\n\n  // Default settings for our auto-animate transitions, can be\n  // overridden per-slide or per-element via data arguments\n  autoAnimateEasing: 'ease',\n  autoAnimateDuration: 1.0,\n  autoAnimateUnmatched: true,\n\n  // CSS properties that can be auto-animated. Position & scale\n  // is matched separately so there's no need to include styles\n  // like top/right/bottom/left, width/height or margin.\n  autoAnimateStyles: [\n    'opacity',\n    'color',\n    'background-color',\n    'padding',\n    'font-size',\n    'line-height',\n    'letter-spacing',\n    'border-width',\n    'border-color',\n    'border-radius',\n    'outline',\n    'outline-offset'\n  ],\n\n  // Controls automatic progression to the next slide\n  // - 0:      Auto-sliding only happens if the data-autoslide HTML attribute\n  //           is present on the current slide or fragment\n  // - 1+:     All slides will progress automatically at the given interval\n  // - false:  No auto-sliding, even if data-autoslide is present\n  autoSlide: 0,\n\n  // Stop auto-sliding after user input\n  autoSlideStoppable: true,\n\n  // Use this method for navigation when auto-sliding (defaults to navigateNext)\n  autoSlideMethod: null,\n\n  // Specify the average time in seconds that you think you will spend\n  // presenting each slide. This is used to show a pacing timer in the\n  // speaker view\n  defaultTiming: null,\n\n  // Enable slide navigation via mouse wheel\n  mouseWheel: false,\n\n  // Opens links in an iframe preview overlay\n  // Add `data-preview-link` and `data-preview-link=\"false\"` to customise each link\n  // individually\n  previewLinks: false,\n\n  // Exposes the reveal.js API through window.postMessage\n  postMessage: true,\n\n  // Dispatches all reveal.js events to the parent window through postMessage\n  postMessageEvents: false,\n\n  // Focuses body when page changes visibility to ensure keyboard shortcuts work\n  focusBodyOnPageVisibilityChange: true,\n\n  // Transition style\n  transition: 'slide', // none/fade/slide/convex/concave/zoom\n\n  // Transition speed\n  transitionSpeed: 'default', // default/fast/slow\n\n  // Transition style for full page slide backgrounds\n  backgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom\n\n  // The maximum number of pages a single slide can expand onto when printing\n  // to PDF, unlimited by default\n  pdfMaxPagesPerSlide: Number.POSITIVE_INFINITY,\n\n  // Prints each fragment on a separate slide\n  pdfSeparateFragments: true,\n\n  // Offset used to reduce the height of content within exported PDF pages.\n  // This exists to account for environment differences based on how you\n  // print to PDF. CLI printing options, like phantomjs and wkpdf, can end\n  // on precisely the total height of the document whereas in-browser\n  // printing has to end one pixel before.\n  pdfPageHeightOffset: -1,\n\n  // Number of slides away from the current that are visible\n  viewDistance: 3,\n\n  // Number of slides away from the current that are visible on mobile\n  // devices. It is advisable to set this to a lower number than\n  // viewDistance in order to save resources.\n  mobileViewDistance: 2,\n\n  // The display mode that will be used to show slides\n  display: 'block',\n\n  // Hide cursor if inactive\n  hideInactiveCursor: true,\n\n  // Time before the cursor is hidden (in ms)\n  hideCursorTime: 5000\n\n});"}}},"699bbe77":{"name":"initialization.html","type":"code","versionIndex":["20cbdef7","b49c13ea","a688e818","f8d224e3","8f082a96"],"versions":{"8f082a96":{"value":"<script src=\"dist/reveal.js\"></script>\n<script src=\"plugins/notes/notes.js\"></script>\n<script src=\"plugins/markdown/markdown.js\"></script>\n<script>\n  Reveal.on('ready', () => {\n    if( Reveal.hasPlugin('notes') ) {\n      // Now that plugins are ready, we can interact with them \n      Reveal.getPlugin('notes').open();\n    }\n  });\n  Reveal.initialize({\n    transition: 'none'\n    plugins: [ RevealNotes, RevealMarkdown ]\n  });\n</script>"},"f8d224e3":{"value":"<script src=\"dist/reveal.js\"></script>\n<script src=\"plugins/notes/notes.js\"></script>\n<script src=\"plugins/markdown/markdown.js\"></script>\n<script>\n  Reveal.on('ready', () => {\n    // Now that plugins are ready, we can interact with them \n    Reveal.getPlugin('notes').open();\n  });\n  Reveal.initialize({\n    transition: 'none'\n    plugins: [ RevealNotes, RevealMarkdown ]\n  });\n</script>"},"20cbdef7":{"value":"<script src=\"dist/reveal.js\"></script>\n<script>\n  Reveal.initialize({\n    transition: 'none'\n  });\n</script>"},"b49c13ea":{"value":"<script src=\"dist/reveal.js\"></script>\n<script>\n  Reveal.initialize({\n    transition: 'none'\n  }).then(() => {\n    // reveal.js is ready\n  });\n</script>"},"a688e818":{"value":"<script src=\"dist/reveal.js\"></script>\n<script src=\"plugins/notes/notes.js\"></script>\n<script src=\"plugins/markdown/markdown.js\"></script>\n<script>\n  Reveal.initialize({\n    transition: 'none'\n    plugins: [ RevealNotes, RevealMarkdown ]\n  });\n</script>"}}},"2b397a6a":{"name":"reveal.png","type":"image","versionIndex":["85e79b90"],"versions":{"85e79b90":{"height":720,"value":"https://d1835mevib0k1p.cloudfront.net/portfolio/v2/images/reveal-js.png?1","width":1280}}}},"title":"reveal.js","version":"0.3.1","updated_at":1666726071826}
